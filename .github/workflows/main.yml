name: CI

permissions:
  actions: write
  contents: read
  id-token: write

on:
  push:
    branches: [master, main]
  pull_request:

env:
  COVERAGE: true
  RUBY_VERSION: "3.3"

jobs:
  test:
    runs-on: ubuntu-latest
    name: Ruby ${{ matrix.ruby }} Tests
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.2", "3.3"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Create tmp directory
        run: mkdir -p tmp

      - name: Run tests with coverage
        run: bundle exec rake spec
        env:
          COVERAGE: true

      - name: Upload coverage to Qlty (Ruby ${{ env.RUBY_VERSION }} only)
        if: matrix.ruby == ${{ env.RUBY_VERSION }}
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/.resultset.json

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Create tmp directory
        run: mkdir -p tmp

      - name: Run Brakeman security scan
        run: |
          bundle exec brakeman --force --format json --output tmp/brakeman.json --exit-on-warn || true
          echo "‚úÖ Brakeman security scan completed"

      - name: Display Brakeman results
        run: |
          if [ -f tmp/brakeman.json ]; then
            echo "üîç Brakeman Security Report:"
            bundle exec brakeman --force --format text
          else
            echo "‚ö†Ô∏è Brakeman report not found"
          fi

      - name: Upload Brakeman results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-report
          path: tmp/brakeman.json
          retention-days: 30

  quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run RuboCop
        run: bundle exec rubocop --format github

  compatibility:
    runs-on: ubuntu-latest
    name: Compatibility Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Check gem build
        run: |
          gem build class-metrix.gemspec
          echo "‚úÖ Gem builds successfully"

      - name: Check gem installation
        run: |
          gem install class-metrix-*.gem --local
          echo "‚úÖ Gem installs successfully"

      - name: Verify gem functionality
        run: |
          ruby -e "require 'class_metrix'; puts '‚úÖ Gem loads successfully'"

      - name: Check dependencies compatibility
        run: |
          bundle outdated --strict || echo "üì¶ Some dependencies could be updated"
          echo "‚úÖ Dependencies check completed"

  release-check:
    runs-on: ubuntu-latest
    name: Release Readiness
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: [test, security, quality, compatibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Verify release readiness
        run: |
          echo "üöÄ All checks passed - ready for release!"
          echo "‚úÖ Tests: Passed"
          echo "üîí Security: Scanned"
          echo "üìä Quality: Checked"
          echo "üîß Compatibility: Verified"
