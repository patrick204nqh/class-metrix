name: CI

permissions:
  actions: write
  contents: read
  id-token: write

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  COVERAGE: true
  RUBY_VERSION: "3.3"
  CI: true

jobs:
  # Skip CI for draft PRs and dependency updates
  should-skip:
    name: Check if CI should be skipped
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: "same_content_newer"
          skip_after_successful_duplicate: "true"
          paths_ignore: '["**/*.md", "docs/**", "examples/**", "*.md"]'

  test:
    needs: should-skip
    if: needs.should-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    name: Ruby ${{ matrix.ruby }} Tests
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.2", "3.3"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Create tmp directory
        run: mkdir -p tmp

      - name: Run tests with coverage
        run: bundle exec rake spec
        env:
          COVERAGE: true

      - name: Upload coverage to Qlty (Ruby ${{ env.RUBY_VERSION }} only)
        if: matrix.ruby == env.RUBY_VERSION && success() && github.ref == 'refs/heads/master'
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/.resultset.json

      - name: Upload coverage artifacts
        if: matrix.ruby == env.RUBY_VERSION && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-ruby-${{ matrix.ruby }}
          path: coverage/
          retention-days: 7

  security:
    needs: should-skip
    if: needs.should-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Create tmp directory
        run: mkdir -p tmp

      - name: Run Brakeman security scan
        run: |
          bundle exec brakeman --force --format json --output tmp/brakeman.json --exit-on-warn || true
          echo "✅ Brakeman security scan completed"

      - name: Display Brakeman results
        run: |
          if [ -f tmp/brakeman.json ]; then
            echo "🔍 Brakeman Security Report:"
            bundle exec brakeman --force --format text
          else
            echo "⚠️ Brakeman report not found"
          fi

      - name: Upload Brakeman results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-report
          path: tmp/brakeman.json
          retention-days: 30

  quality:
    needs: should-skip
    if: needs.should-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run RuboCop
        run: bundle exec rubocop --format github

  compatibility:
    needs: should-skip
    if: needs.should-skip.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    name: Compatibility Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Check gem build
        run: |
          gem build class-metrix.gemspec
          echo "✅ Gem builds successfully"

      - name: Check gem installation
        run: |
          gem install class-metrix-*.gem --local
          echo "✅ Gem installs successfully"

      - name: Verify gem functionality
        run: |
          ruby -e "require 'class_metrix'; puts '✅ Gem loads successfully'"

      - name: Check dependencies compatibility
        run: |
          bundle outdated --strict || echo "📦 Some dependencies could be updated"
          echo "✅ Dependencies check completed"

  release-check:
    runs-on: ubuntu-latest
    name: Release Readiness
    if: github.ref == 'refs/heads/master'
    needs: [test, security, quality, compatibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Verify release readiness
        run: |
          echo "🚀 All checks passed - ready for release!"
          echo "✅ Tests: Passed"
          echo "🔒 Security: Scanned"
          echo "📊 Quality: Checked"
          echo "🔧 Compatibility: Verified"

  ci-status:
    runs-on: ubuntu-latest
    name: CI Status Notification
    if: always()
    needs: [test, security, quality, compatibility]
    steps:
      - name: Determine CI status
        id: ci_status
        run: |
          # Check the status of all jobs
          TEST_STATUS="${{ needs.test.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          QUALITY_STATUS="${{ needs.quality.result }}"
          COMPATIBILITY_STATUS="${{ needs.compatibility.result }}"

          echo "Test: $TEST_STATUS"
          echo "Security: $SECURITY_STATUS"
          echo "Quality: $QUALITY_STATUS"
          echo "Compatibility: $COMPATIBILITY_STATUS"

          # Determine overall status
          if [[ "$TEST_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$QUALITY_STATUS" == "success" && "$COMPATIBILITY_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          elif [[ "$TEST_STATUS" == "failure" || "$SECURITY_STATUS" == "failure" || "$QUALITY_STATUS" == "failure" || "$COMPATIBILITY_STATUS" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          fi

      - name: Send CI status notification
        if: steps.ci_status.outputs.status && env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"#cicd-notifications\",
              \"username\": \"GitHub Actions CI\",
              \"icon_emoji\":\":robot_face:\",
              \"attachments\": [{
                \"color\": \"${{ steps.ci_status.outputs.color }}\",
                \"title\": \"${{ steps.ci_status.outputs.emoji }} CI Pipeline Complete\",
                \"title_link\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                \"fields\": [
                  {\"title\": \"Repository\", \"value\": \"<https://github.com/${{ github.repository }}|${{ github.repository }}>\", \"short\": true},
                  {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
                  {\"title\": \"Trigger\", \"value\": \"${{ github.event_name }}\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"${{ steps.ci_status.outputs.status }}\", \"short\": true},
                  {\"title\": \"Tests\", \"value\": \"${{ needs.test.result }}\", \"short\": true},
                  {\"title\": \"Security\", \"value\": \"${{ needs.security.result }}\", \"short\": true},
                  {\"title\": \"Quality\", \"value\": \"${{ needs.quality.result }}\", \"short\": true},
                  {\"title\": \"Compatibility\", \"value\": \"${{ needs.compatibility.result }}\", \"short\": true}
                ],
                \"footer\": \"ClassMetrix CI Pipeline\",
                \"ts\": $(date +%s)
              }]
            }" \
            "${{ secrets.SLACK_WEBHOOK_URL }}" || echo "Failed to send Slack notification"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
